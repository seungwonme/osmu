---
description:
globs:
alwaysApply: false
---
# Supabase 인증/SSR/회원 분기/세련된 UI 커서룰 (완전 가이드)

이 규칙만 있으면 새 프로젝트에서도 Supabase 인증, SSR 세션 관리, 회원/비회원 분기, 현대적 UI를 안정적으로 구현할 수 있습니다.

## 전체 구현 순서

1. **Supabase 프로젝트 생성 및 환경변수 세팅**
   - Supabase 대시보드에서 새 프로젝트 생성
   - `.env`에 아래 환경변수 추가:
     ```
     NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
     NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
     ```
2. **패키지 설치**
   - `@supabase/supabase-js`, `@supabase/ssr`, `tailwindcss` 등 설치
3. **Supabase 클라이언트 유틸리티 작성**
   - [src/lib/supabaseClient.ts](mdc:src/lib/supabaseClient.ts) 참고
4. **SSR 인증 미들웨어 구현**
   - [middleware.ts](mdc:middleware.ts) 참고
5. **인증(로그인/회원가입) 페이지 구현**
   - [src/app/auth/page.tsx](mdc:src/app/auth/page.tsx) 참고
6. **헤더/네비게이션 구현**
   - [src/app/header.tsx](mdc:src/app/header.tsx) 참고
   - 스크롤 시 배경/그림자 동적 처리, 기본 투명
7. **메인 페이지(기능 분기/세련된 UI) 구현**
   - [src/app/page.tsx](mdc:src/app/page.tsx) 참고
   - 회원/비회원 분기, 안내 메시지, 반응형, 컬러, 여백, 그림자, 고급 Tailwind 활용

## 실전 팁 & 주의사항
- SSR 환경에서는 반드시 미들웨어로 세션을 갱신해야 함
- 클라이언트에서 `supabase.auth.getUser()`로 회원/비회원 분기
- 헤더는 스크롤 시에만 배경/그림자, 기본은 투명 + 연한 보더
- hero(타이틀/폼)와 헤더 사이 충분한 여백(margin-top)
- 안내 메시지는 flex로 세로/가운데 정렬, 고정/반응형 위치 활용
- Tailwind로 컬러, 그림자, 라운드, hover, 다크모드 적극 활용

## 각 파일별 역할 & 예시

### 1. Supabase 클라이언트 ([src/lib/supabaseClient.ts](mdc:src/lib/supabaseClient.ts))
```ts
import { createBrowserClient, createServerClient } from "@supabase/ssr";
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
export const createSupabaseBrowserClient = () => createBrowserClient(supabaseUrl, supabaseAnonKey);
export const createSupabaseServerClient = (cookies: any) => createServerClient(supabaseUrl, supabaseAnonKey, { cookies });
```

### 2. SSR 인증 미들웨어 ([middleware.ts](mdc:middleware.ts))
```ts
import { createServerClient } from "@supabase/ssr";
import { NextResponse, type NextRequest } from "next/server";
export async function middleware(request: NextRequest) {
  let supabaseResponse = NextResponse.next({ request });
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() { return request.cookies.getAll(); },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value));
          supabaseResponse = NextResponse.next({ request });
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          );
        },
      },
    }
  );
  const { data: { user } } = await supabase.auth.getUser();
  if (!user && !request.nextUrl.pathname.startsWith("/auth") && !request.nextUrl.pathname.startsWith("/api") && request.nextUrl.pathname !== "/") {
    const url = request.nextUrl.clone();
    url.pathname = "/auth";
    return NextResponse.redirect(url);
  }
  return supabaseResponse;
}
export const config = { matcher: ["/((?!_next|static|favicon.ico).*)"] };
```

### 3. 인증 페이지 ([src/app/auth/page.tsx](mdc:src/app/auth/page.tsx))
```tsx
"use client";
import { useState } from "react";
import { createSupabaseBrowserClient } from "@/lib/supabaseClient";
export default function AuthPage() {
  const supabase = createSupabaseBrowserClient();
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault(); setError(null); setLoading(true);
    try {
      if (isLogin) {
        const { error } = await supabase.auth.signInWithPassword({ email, password });
        if (error) throw error; window.location.href = "/";
      } else {
        const { error } = await supabase.auth.signUp({ email, password });
        if (error) throw error;
        alert("회원가입이 완료되었습니다. 이메일을 확인해 주세요.");
        setIsLogin(true);
      }
    } catch (err: any) {
      setError(err.message || "알 수 없는 오류가 발생했습니다.");
    } finally { setLoading(false); }
  };
  // ...폼 렌더링 생략...
}
```

### 4. 헤더 ([src/app/header.tsx](mdc:src/app/header.tsx))
```tsx
"use client";
import { useEffect, useState } from "react";
import { createSupabaseBrowserClient } from "@/lib/supabaseClient";
import { useRouter } from "next/navigation";
import Link from "next/link";
export default function Header() {
  const supabase = createSupabaseBrowserClient();
  const [user, setUser] = useState<any>(null);
  const router = useRouter();
  const [scrolled, setScrolled] = useState(false);
  useEffect(() => {
    supabase.auth.getUser().then(({ data }) => setUser(data.user));
    const { data: listener } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user ?? null);
    });
    return () => { listener?.subscription.unsubscribe(); };
  }, []);
  useEffect(() => {
    const onScroll = () => { setScrolled(window.scrollY > 10); };
    window.addEventListener("scroll", onScroll);
    return () => window.removeEventListener("scroll", onScroll);
  }, []);
  const handleLogout = async () => {
    await supabase.auth.signOut(); setUser(null); router.push("/auth");
  };
  return (
    <header className={`w-full flex justify-between items-center px-6 py-4 border-b transition-all duration-300 sticky top-0 z-20 ${scrolled ? "bg-white/80 dark:bg-gray-950/80 shadow-sm border-blue-100 dark:border-gray-800 backdrop-blur-md" : "bg-transparent border-blue-50 dark:border-gray-900"}`} style={{ minHeight: 72 }}>
      <Link href="/" className="font-extrabold text-2xl md:text-3xl text-blue-700 dark:text-blue-300 tracking-tight flex items-center gap-2 hover:scale-105 transition-transform">
        <span className="inline-block bg-gradient-to-r from-blue-500 to-blue-700 dark:from-blue-400 dark:to-blue-600 text-white dark:text-white px-3 py-1 rounded-lg shadow mr-2 text-lg md:text-xl">Osmu</span>
        <span className="hidden md:inline-block">원소스 멀티유즈</span>
      </Link>
      <nav>
        {user ? (
          <button className="btn bg-gradient-to-r from-blue-500 to-blue-700 hover:from-blue-600 hover:to-blue-800 text-white font-bold px-6 py-2 rounded-lg shadow transition-all border-none" onClick={handleLogout}>로그아웃</button>
        ) : (
          <Link href="/auth" className="btn bg-gradient-to-r from-blue-400 to-blue-600 hover:from-blue-500 hover:to-blue-800 text-white font-bold px-6 py-2 rounded-lg shadow transition-all border-none">로그인/회원가입</Link>
        )}
      </nav>
    </header>
  );
}
```

### 5. 메인 페이지 (회원/비회원 분기, 세련된 UI) ([src/app/page.tsx](mdc:src/app/page.tsx))
```tsx
// ...생략...
<main className="flex flex-col items-center min-h-screen p-4 bg-gradient-to-br from-blue-50 to-white dark:from-gray-900 dark:to-gray-950 transition-colors duration-300">
  <section className="w-full max-w-3xl mb-10 text-center mt-12 md:mt-20"> ... </section>
  <section className="flex flex-col md:flex-row gap-8 w-full max-w-5xl mb-32"> ... </section>
  {!isMember && (
    <div className="flex-1 flex flex-col items-center justify-center fixed bottom-0 left-0 right-0">
      <div className="flex flex-col items-center justify-center text-gray-500 text-center mb-4 bg-white dark:bg-gray-900 rounded-xl p-6 border border-blue-100 dark:border-gray-800 shadow min-h-[180px]">
        <span className="text-lg font-semibold">요약(스레드/링크드인) 기능은 <span className="text-blue-600 dark:text-blue-300">회원만</span> 사용할 수 있습니다.</span>
        <br />
        <a href="/auth" className="text-blue-600 dark:text-blue-300 underline font-bold hover:text-blue-800 dark:hover:text-blue-400 transition-colors mt-2">로그인/회원가입 하러가기</a>
      </div>
    </div>
  )}
</main>
```

---

## 디자인/UX 가이드
- 헤더: 투명+연한 보더, 스크롤 시 배경/그림자, 고정
- hero/폼: 충분한 margin-top, 카드/입력/버튼 모두 라운드+그림자+컬러
- 안내 메시지: flex 세로/가운데 정렬, 고정/반응형 위치, 컬러 강조
- 전체적으로 Tailwind로 반응형, 다크모드, 컬러 포인트, 여백, 그림자, hover 효과 적극 활용

---

이 규칙만 있으면 새 프로젝트에서도 Supabase 인증, SSR, 회원/비회원 분기, 세련된 UI를 안정적으로 구현할 수 있습니다.
