---
description:
globs:
alwaysApply: false
---
# Supabase 인증 및 SSR 환경 구축 가이드

이 프로젝트는 Supabase를 활용한 인증(로그인/회원가입)과 Next.js App Router 기반 SSR 환경에서의 세션 관리, 회원/비회원 분기 기능을 포함합니다.

## 주요 구현 내용

- Supabase 프로젝트 생성 및 환경변수 설정
  - `.env`에 `NEXT_PUBLIC_SUPABASE_URL`, `NEXT_PUBLIC_SUPABASE_ANON_KEY`를 입력
- Supabase 클라이언트 유틸리티 작성: [src/lib/supabaseClient.ts](mdc:src/lib/supabaseClient.ts)
  - 브라우저/서버 환경 모두 지원
- 인증 페이지: [src/app/auth/page.tsx](mdc:src/app/auth/page.tsx)
  - 이메일/비밀번호 기반 회원가입 및 로그인 폼 구현
- SSR 세션 갱신 및 인증 미들웨어: [middleware.ts](mdc:middleware.ts)
  - SSR 환경에서 세션 자동 갱신
  - 인증이 필요한 경로에 비회원 접근 시 `/auth`로 리다이렉트
- 헤더 컴포넌트: [src/app/header.tsx](mdc:src/app/header.tsx)
  - 인증 상태에 따라 로그인/로그아웃 버튼 표시
- 레이아웃: [src/app/layout.tsx](mdc:src/app/layout.tsx)
  - 모든 페이지 상단에 헤더 고정
- 메인 페이지: [src/app/page.tsx](mdc:src/app/page.tsx)
  - 비회원: 유튜브 자막 추출만 가능, 요약(스레드/링크드인) 기능은 로그인 유도
  - 회원: 자막 + 요약(스레드/링크드인) 기능 모두 사용 가능

## 인증/권한 분기 핵심
- 클라이언트에서 Supabase 세션을 확인하여 회원/비회원 분기 처리
- SSR 미들웨어로 서버사이드 보호도 병행

---

## 예시 코드

### 1. Supabase 클라이언트 생성 ([src/lib/supabaseClient.ts](mdc:src/lib/supabaseClient.ts))
```ts
import { createBrowserClient, createServerClient } from "@supabase/ssr";

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

export const createSupabaseBrowserClient = () =>
  createBrowserClient(supabaseUrl, supabaseAnonKey);

export const createSupabaseServerClient = (cookies: any) =>
  createServerClient(supabaseUrl, supabaseAnonKey, { cookies });
```

### 2. 인증 미들웨어 ([middleware.ts](mdc:middleware.ts))
```ts
import { createServerClient } from "@supabase/ssr";
import { NextResponse, type NextRequest } from "next/server";

export async function middleware(request: NextRequest) {
  let supabaseResponse = NextResponse.next({ request });
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() { return request.cookies.getAll(); },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value));
          supabaseResponse = NextResponse.next({ request });
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          );
        },
      },
    }
  );
  const { data: { user } } = await supabase.auth.getUser();
  if (!user && !request.nextUrl.pathname.startsWith("/auth") && !request.nextUrl.pathname.startsWith("/api") && request.nextUrl.pathname !== "/") {
    const url = request.nextUrl.clone();
    url.pathname = "/auth";
    return NextResponse.redirect(url);
  }
  return supabaseResponse;
}
export const config = { matcher: ["/((?!_next|static|favicon.ico).*)"] };
```

### 3. 인증 페이지 ([src/app/auth/page.tsx](mdc:src/app/auth/page.tsx))
```tsx
"use client";
import { useState } from "react";
import { createSupabaseBrowserClient } from "@/lib/supabaseClient";
export default function AuthPage() {
  const supabase = createSupabaseBrowserClient();
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault(); setError(null); setLoading(true);
    try {
      if (isLogin) {
        const { error } = await supabase.auth.signInWithPassword({ email, password });
        if (error) throw error; window.location.href = "/";
      } else {
        const { error } = await supabase.auth.signUp({ email, password });
        if (error) throw error;
        alert("회원가입이 완료되었습니다. 이메일을 확인해 주세요.");
        setIsLogin(true);
      }
    } catch (err: any) {
      setError(err.message || "알 수 없는 오류가 발생했습니다.");
    } finally { setLoading(false); }
  };
  // ...폼 렌더링 생략...
}
```

### 4. 헤더 컴포넌트 ([src/app/header.tsx](mdc:src/app/header.tsx))
```tsx
"use client";
import { useEffect, useState } from "react";
import { createSupabaseBrowserClient } from "@/lib/supabaseClient";
import { useRouter } from "next/navigation";
export default function Header() {
  const supabase = createSupabaseBrowserClient();
  const [user, setUser] = useState<any>(null);
  const router = useRouter();
  useEffect(() => {
    supabase.auth.getUser().then(({ data }) => setUser(data.user));
    const { data: listener } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user ?? null);
    });
    return () => { listener?.subscription.unsubscribe(); };
  }, []);
  const handleLogout = async () => {
    await supabase.auth.signOut(); setUser(null); router.push("/auth");
  };
  // ...렌더링 생략...
}
```

### 5. 메인 페이지 회원/비회원 분기 ([src/app/page.tsx](mdc:src/app/page.tsx))
```tsx
const [isMember, setIsMember] = useState(false);
useEffect(() => {
  const supabase = createSupabaseBrowserClient();
  supabase.auth.getUser().then(({ data }) => setIsMember(!!data.user));
  const { data: listener } = supabase.auth.onAuthStateChange((_event, session) => {
    setIsMember(!!session?.user);
  });
  return () => { listener?.subscription.unsubscribe(); };
}, []);
// ...
{isMember ? (/* 요약 기능 노출 */) : (/* 로그인 유도 메시지 */)}
```

---
이 규칙은 Supabase 인증, SSR 세션 관리, 회원/비회원 분기, 주요 파일 구조와 실제 적용 예시 코드를 빠르게 파악하고자 할 때 참고하세요.
